/*****************************
* Verify that a form's zip code is in
* a particular congressional district
* version 0.2.3
******************************/
(function($) {

    var THRESHOLD = {
        DISTRICT: {
            value: 0,
            name: 'District',
            description: 'A single unambiguous Congressional District'
        },
        FRINGE: {
            value: 1,
            name: 'Fringe',
            description: 'A single Congressional District and any Zip5 that intersects it'
        },
        STATE: {
            value: 3,
            name: 'State',
            description: 'Any Zip in the state'
        }
    };

    var methods = {
        init: function(options) {

            // Defaults, extended with any options that were provided
            var settings = $.extend({
                proxyUrl: '/components/util/zip-proxy.aspx',
                zip5: 'input[name=zip5]',
                zip4: 'input[name=zip4]',
                submitClass: 'submit',
                activeClass: 'activeForm',
                threshold: 'fringe',
                msgMultiZip: 'That zip code is split between more than one district. Please enter your full 9-digit zip code.',
                msgOutside: 'That zip code falls in another district.',
                msgNotZip: 'That is not a valid zip code.',
                msgError: 'There was an error while validating your district.'
            }, options);

            if(!settings.state || !settings.district){
                $.error(
                    'Both state ("' + settings.state + '") ' +
                    'and district ("' + settings.district + '") ' +
                    'are required for jQuery.zipForm');
            }

            settings.threshold = THRESHOLD[settings.threshold.toUpperCase()] || THRESHOLD.FRINGE;

            function parseDistrictResponse(response, submit_callback) {
                if (response.split('', 1)[0] != '0') {
                    alert(settings.msgNotZip);
                    return;
                }
                if (settings.threshold == THRESHOLD.STATE) {
                    if ((new RegExp(settings.state + '\\d\\d', 'i')).test(response)) {
                        submit_callback();
                    } else {
                        alert(settings.msgOutside);
                        return;
                    }
                } else if (settings.threshold == THRESHOLD.FRINGE) {
                    if ((new RegExp(settings.state + settings.district, 'i')).test(response)) {
                        submit_callback();
                    } else {
                        alert(settings.msgOutside);
                        return;
                    }
                } else if (settings.threshold == THRESHOLD.DISTRICT) {
                    var result_array = response.split('\n');
                    if (result_array.length > 2) {
                        alert(settings.msgMultiZip);
                        return;
                    } else if ((new RegExp(settings.state + settings.district, 'i')).test(response)) {
                        submit_callback();
                    } else {
                        alert(settings.msgOutside);
                        return;
                    }
                } else {
                    $.error('Unexpected threshold value: "' + settings.threshold + '"');
                }
            }

            return this.each(function() {
                var form = $(this);
                if (form.data('zipForm')) {
                    console.warn('jQuery.zipForm already bound to form. Refusing to re-bind.');
                    return;
                }

                var zip5 = form.find(settings.zip5);
                var zip4 = form.find(settings.zip4);
                if (zip5.length == 0) {
                    $.error('No zip5 found for selector:' + settings.zip5);
                    return;
                }

                form.data('zipForm', true);
                form.bind('submit.zipForm', function(event) {
                    if (!form.hasClass(settings.submitClass)) {
                        event.preventDefault();
                        var payload = {
                            zip5: zip5.val(),
                            zip4: zip4.val()
                        };

                        $.ajax({
                            url: settings.proxyUrl,
                            method: 'get',
                            data: payload,
                            success: function(data, textStatus, jqXHR) {
                                parseDistrictResponse(data, function(){
                                    form.addClass(settings.submitClass);
                                    form.submit();
                                });
                            },
                            error: function(jqXHR, textStatus, errorThrown) {
                                form.addClass(settings.failureClass);
                                alert(settings.msgError);
                            }
                        });
                    }
                });
            });
        }
    };

    $.fn.zipForm = function(method) {
        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === 'object' || !method) {
            return methods.init.apply(this, arguments);
        } else {
            $.error('Method ' + method + ' does not exist on jQuery.zipForm');
        }
    }
})(jQuery);
